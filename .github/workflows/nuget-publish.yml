name: Build and Publish to NuGet

on:
  push:
    branches:
      - main  # Only deploy from main branch

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK (6.0 & 8.0)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore

      - name: Run Unit Tests
        run: dotnet test --configuration Release --no-build --verbosity normal

  publish:
    name: Publish to NuGet
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK (6.0 & 8.0)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore

      - name: Validate NuGet API Key
        run: |
          if [ -z "${{ secrets.LIGHTRAILDOTNETNUGET }}" ]; then
            echo "❌ NuGet API Key is missing!"
            exit 1
          fi

      - name: Get Version from Git Tag
        id: get_version
        run: |
          TAG_VERSION=$(git describe --tags --always --match 'v[0-9]*' | sed 's/^v//')
          if [[ -z "$TAG_VERSION" ]]; then TAG_VERSION="1.0.0"; fi
          echo "VERSION=$TAG_VERSION" >> $GITHUB_ENV
      
      - name: Create NuGet Package with Git Version
        run: dotnet pack --configuration Release --no-build --output nupkg /p:Version=${{ env.VERSION }} /p:PackageVersion=${{ env.VERSION }}

      - name: Check for .nupkg files
        run: |
          if ls nupkg/*.nupkg 1> /dev/null 2>&1; then
            echo "✅ NuGet package found, proceeding with push."
          else
            echo "❌ No .nupkg files found! Check dotnet pack step."
            exit 1
          fi

      - name: Publish to NuGet
        run: dotnet nuget push "nupkg/*.nupkg" --api-key ${{ secrets.LIGHTRAILDOTNETNUGET }} --source https://api.nuget.org/v3/index.json --skip-duplicate
